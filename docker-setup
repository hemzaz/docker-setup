#!/bin/bash
set -o errexit

: "${docker_setup_version:=main}"

function show_banner() {
    cat <<"EOF"
     _            _                           _
  __| | ___   ___| | _____ _ __      ___  ___| |_ _   _ _ __
 / _` |/ _ \ / __| |/ / _ \ '__|____/ __|/ _ \ __| | | | '_ \
| (_| | (_) | (__|   <  __/ | |_____\__ \  __/ |_| |_| | |_) |
 \__,_|\___/ \___|_|\_\___|_|       |___/\___|\__|\__,_| .__/
                                                       |_|
                     The container tools installer and updater
                 https://github.com/nicholasdille/docker-setup
--------------------------------------------------------------
This script will install Docker Engine as well as useful tools
from the container ecosystem.

EOF
}

reset="\e[39m\e[49m"
green="\e[92m"
yellow="\e[93m"
red="\e[91m"
grey="\e[90m"
magenta="\e[95m"

# https://unicode.org/emoji/charts-14.0/full-emoji-list.html
emoji_tool="$(echo -e "\U0001F528")"
emoji_auth="$(echo -e "\U0001F513")"
emoji_whale="$(echo -e "\U0001F433")"
emoji_container=$(echo -e "\U0001F5C3")
emoji_image="$(echo -e "\U0001F4E6")"
emoji_layer="$(echo -e "\U0001F4C2")"
emoji_archive="$(echo -e "\U0001F4E5")"
emoji_sign="$(echo -e "\U00002712")"
emoji_push="$(echo -e "\U0001F4E4")"
emoji_pull="$(echo -e "\U0001F4E5")"
emoji_build="$(echo -e "\U0001F9F1")"
emoji_inspect="$(echo -e "\U0001F50D")"

: "${REGISTRY:=ghcr.io}"
: "${REPOSITORY_PREFIX:=nicholasdille/docker-setup/}"

: "${docker_setup_cache:=/var/cache/docker-setup}"
if ! test -w "${docker_setup_cache}"; then
    >&2 echo "WARNING: Cache directory <${docker_setup_cache}> is not writable."
    docker_setup_cache="${HOME}/.cache/docker-setup"
    >&2 echo "WARNING: Using cache directory <${docker_setup_cache}>"
fi
mkdir -p "${docker_setup_cache}"

export PATH="${docker_setup_cache}/bin:${PATH}"
REGCLIENT_VERSION=0.4.5
if ! type regctl >/dev/null 2>&1 || test "$(regctl version | jq -r .VCSTag | tr -d v)" != "${REGCLIENT_VERSION}"; then
    >&2 echo "Installing regctl"
    mkdir -p "${docker_setup_cache}/bin"
    curl --silent --location --output "${docker_setup_cache}/bin/regctl" \
        "https://github.com/regclient/regclient/releases/download/v${REGCLIENT_VERSION}/regctl-linux-amd64"
    chmod +x "${docker_setup_cache}/bin/regctl"
fi
YQ_VERSION=4.27.5
if ! type yq >/dev/null 2>&1 || test "$(yq --version | cut -d' ' -f4)" != "${YQ_VERSION}"; then
    >&2 echo "Installing yq"
    mkdir -p "${docker_setup_cache}/bin"
    curl --silent --location --output "${docker_setup_cache}/bin/yq" \
        "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64"
    chmod +x "${docker_setup_cache}/bin/yq"
fi
JQ_VERSION=1.6
if ! type jq >/dev/null 2>&1 || test "$(jq --version | cut -d- -f2)" != "${JQ_VERSION}"; then
    >&2 echo "Installing jq"
    mkdir -p "${docker_setup_cache}/bin"
    curl --silent --location --output "${docker_setup_cache}/bin/yq" \
        "https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64"
    chmod +x "${docker_setup_cache}/bin/jq"
fi

if test -z "${DOCKER_CONFIG}"; then
    export DOCKER_CONFIG="${HOME}/.docker"
fi

function update() {
    regctl manifest get "${REGISTRY}/${REPOSITORY_PREFIX}metadata:${docker_setup_version}" --format raw-body | jq --raw-output '.layers[].digest' \
    | while read DIGEST; do
        regctl blob get "${REGISTRY}/${REPOSITORY_PREFIX}metadata:${docker_setup_version}" "${DIGEST}" \
        | tar --extract --gzip --directory="${docker_setup_cache}" --no-same-owner
    done
}

docker_setup_metadata_file="${docker_setup_cache}/metadata.json"
if test -f "${PWD}/metadata.json"; then
    docker_setup_metadata_file="${PWD}/metadata.json"
else
    if ! test -f "${docker_setup_metadata_file}"; then
        update
    fi
fi
>&2 echo "Using ${docker_setup_metadata_file}"

declare -A tool_json
mapfile tool_json_array < <(jq --raw-output --compact-output '.tools[] | "\(.name)=\(.)"' "${docker_setup_metadata_file}")
i=0
while test "$i" -lt "${#tool_json_array[@]}"; do
    name_json=${tool_json_array[$i]}

    name="${name_json%%=*}"
    json="${name_json#*=}"
    tool_json[${name}]="${json}"

    i=$((i + 1))
done

docker_setup_dockerfile_template="${docker_setup_cache}/Dockerfile.template"
if test -f "${PWD}/tools/Dockerfile.template"; then
    docker_setup_dockerfile_template="${PWD}/tools/Dockerfile.template"
else
    curl --silent --location --output "${docker_setup_dockerfile_template}" \
        https://raw.githubusercontent.com/nicholasdille/docker-setup/${docker_setup_version}/tools/Dockerfile.template
fi
>&2 echo "Using ${docker_setup_dockerfile_template}"

all_tools="$(
    jq --raw-output '.tools[] | .name' "${docker_setup_metadata_file}" \
    | sort \
    | xargs
)"
default_tools="$(
    jq --raw-output '.tools[] | select(.tags[] | contains("category/default")) | .name' "${docker_setup_metadata_file}" \
    | xargs
)"
selected_tools="${default_tools}"
install_tools=""
declare -A tool_version
declare -A tool_binary
declare -A tool_check

function resolve_dependencies() {
    local name=$1
    shift
    local state="$@"

    #>&2 echo "resolve_dependencies(${name}): state=${state}."

    if echo "${state}" | tr ' ' '\n' | grep -q "^${name}$"; then
        #>&2 echo "resolve_dependencies(${name}): Already present"
        echo "${state}"
        return
    fi

    local tool_deps
    tool_deps="$(
        jq --raw-output 'select(.dependencies != null) | .dependencies[]' <<<${tool_json[${name}]} \
        | xargs echo
    )"
    #>&2 echo "resolve_dependencies(${name}): deps=${tool_deps}."
    
    local dep
    for dep in ${tool_deps}; do
        #>&2 echo "resolve_dependencies(${name}): calling self for ${dep} with state=${state}."
        state="$(resolve_dependencies "${dep}" "${state}")"
        #>&2 echo "resolve_dependencies(${name}): returned for ${dep} with state=${state}."
    done

    echo "${state} ${name}" | xargs
}

function resolve_dependencies_wrapper() {
    state=""
    for name in ${selected_tools}; do
        state="$(resolve_dependencies "${name}" "${state}")"
    done
    echo "${state}"
}

function generate() {
    CONTENT="$(
        cat "${docker_setup_dockerfile_template}" \
        | sed -E "s|^ARG ref=main|ARG ref=${docker_setup_version}|"
    )"
    while test "$#" -gt 0; do
        tool=$1
        shift

        CONTENT="$(
            echo "${CONTENT}" \
            | sed -E "s|^(# INSERT FROM)|FROM ${REGISTRY}/${REPOSITORY_PREFIX}${tool}:\${ref} AS ${tool}\n\1|" \
            | sed -E "s|^(# INSERT COPY)|COPY --link --from=${tool} / /\n\1|"
        )"
    done
    echo "${CONTENT}"
}

function warm_cache() {
    local temp
    
    temp="$(jq --raw-output '.tools[] | "\(.name)=\(select(.version != null) | .version)"' "${docker_setup_metadata_file}")"
    for pair in ${temp}; do
        local name="${pair%%=*}"
        local value="${pair#*=}"
        #>&2 echo "VERSION name=${name},value=${value}."
        tool_version[${name}]=${value}
    done

    temp="$(jq --raw-output '.tools[] | "\(.name)=\(select(.binary != null) | .binary)"' "${docker_setup_metadata_file}")"
    for pair in ${temp}; do
        local name="${pair%%=*}"
        local value="${pair#*=}"
        #>&2 echo "BINARY name=${name},value=${value}."
        tool_binary[${name}]=${value}
    done
}

function show_help() {
    cat <<EOF
docker-setup

Commands:
  update                  Update tools manifests
  upgrade                 Update docker-setup
  ls                      List available tools
  info                    Show tool manifest
  tags                    Show tags
  dependencies            Resolve dependencies
  inspect                 Show contents image
  generate                Generate Dockerfile
  build                   Build container image
  build-flat              Build container image using "docker commit"
  install                 Install natively
  install-from-registry   Install 
  install-from-image      Build container image with local output

Global options:
  --help                  Display help
  --version               Display version
EOF
}

: "${target:=/usr/local}"
while test "$#" -gt 0; do
    case "$1" in
        --version)
            echo "docker-setup version ${docker_setup_version}"
            ;;

        --help)
            show_help
            ;;
        
        --target=*)
            target="${1#*=}"
            ;;

        --target)
            shift
            target="$1"
            ;;

        --tools|--tools=*)
            if test -n "${install_tools}"; then
                echo "ERROR: Tools already selected. Cannot process --tools."
                exit 1
            fi
            if test "$1" == "--tools"; then
                shift
                tools=$1
            else
                tools="${1#*=}"
            fi
            case "${tools}" in
                all)
                    >&2 echo "Selected all tools"
                    selected_tools="${all_tools}"
                    ;;
                default)
                    >&2 echo "Selected default tools"
                    selected_tools="${default_tools}"
                    ;;
                installed)
                    >&2 echo "NOT IMPLEMENTED YET"
                    exit 1
                    ;;
                *)
                    >&2 echo "Selected custom list of tools"
                    selected_tools="$(echo "${tools}" | tr ',' ' ')"
                    ;;
            esac
            install_tools="$(resolve_dependencies_wrapper)"
            warm_cache
            ;;

        --tags|--tags=*)
            if test -n "${install_tools}"; then
                echo "ERROR: Tools already selected. Cannot process --tags."
                exit 1
            fi
            if test "$1" == "--tags"; then
                shift
                tags=$1
            else
                tags="${1#*=}"
            fi
            selected_tools="$(
                jq --raw-output --arg category "${tags}" '.tools[] | select(.tags[] | contains($category)) | .name' "${docker_setup_metadata_file}" \
                | xargs
            )"
            install_tools="$(resolve_dependencies_wrapper)"
            warm_cache
            ;;

        --all)
            shift
            set -- --all --tools=all "$@"
            ;;

        --default)
            shift
            set -- --default --tools=default "$@"
            ;;

        --installed)
            shift
            set -- --installed --tools=installed "$@"
            ;;

        update)
            update
            exit
            ;;

        upgrade)
            echo "Replacing $0"
            touch /
            exec curl --silent --location -o "$0" https://github.com/nicholasdille/docker-setup/raw/main/docker-setup
            ;;
            
        ls)
            show_banner
            jq --raw-output '.tools[] | "\(.name);\(.version);\(.description)"' "${docker_setup_metadata_file}" \
            | column --separator ';' --table --table-columns Name,Version,Description --table-truncate 3
            ;;

        info)
            show_banner
            shift
            name=$1
            if test -z "${name}"; then
                echo "No tool name specified"
                exit 1
            fi
            shift
            yq --prettyPrint <<<"${tool_json[${name}]}"
            echo
            ;;

        tags)
            show_banner
            jq -r '.tools[].tags[]' "${docker_setup_metadata_file}" | sort | uniq | xargs echo
            ;;

        plan)
            for name in ${install_tools}; do
                echo -n -e "${name}:"

                version="${tool_version[${name}]}"
                echo -n -e " version=${version}"

                binary="${tool_binary[${name}]}"
                if test "${binary}" == "false"; then
                    if test -f "${docker_setup_cache}/${name}/${version}"; then
                        echo -n -e " ${green}MARKER_FILE_PRESENT${reset}"
                    else
                        echo -n -e " ${red}MARKER_FILE_MISSING${reset}"
                    fi
                    echo
                    continue

                else
                    if test -z "${binary}"; then
                        binary="${name}"
                    fi
                    binary="$(
                        echo "${binary}" \
                        | sed "s|\${target}|${target}|g"
                    )"
                    if test "${binary:0:1}" != "/"; then
                        binary="${target}/bin/${binary}"
                    fi
                fi
                echo -n -e " binary=${binary}"

                if test -f "${binary}"; then
                    echo -n -e " ${green}BINARY_PRESENT${reset}"

                    if test -x "${binary}"; then
                        echo -n -e " ${green}BINARY_EXECUTABLE${reset}"
                    fi

                else
                    echo -n -e " ${red}BINARY_MISSING${reset}"
                fi

                check="$(jq --raw-output --arg name "${name}" 'select(.check != null and .check != "") | .check' <<<"${tool_json[${name}]}")"
                if test -n "${check}"; then
                    echo -n -e " check=${check//\$\{binary\}/${binary}}."
                fi

                if test -n "${check}"; then
                    if test -x "${binary}"; then
                        installed_version="$(eval "${check}")"
                        echo -n -e " installed_version=${installed_version}"
                    fi

                    if test "${installed_version}" == "${version}"; then
                        echo -n -e " ${green}VERSION_MATCHES${reset}"
                    else
                        echo -n -e " ${red}VERSION_MISMATCH${reset}"
                    fi

                else
                    if test -f "${docker_setup_cache}/${name}/${version}"; then
                        echo -n -e " ${green}MARKER_FILE_PRESENT${reset}"
                    else
                        echo -n -e " ${red}MARKER_FILE_MISSING${reset}"
                    fi
                fi

                echo
            done
            ;;

        dependencies)
            echo "${install_tools}"
            ;;

        inspect)
            show_banner
            echo "${emoji_tool} Processing ${tool}"
                regctl manifest get "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${docker_setup_version}" --format raw-body | jq --raw-output '.layers[].digest' \
                | while read DIGEST; do
                    echo "${emoji_archive} Inspecting ${DIGEST}"
                    regctl blob get "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${docker_setup_version}" "${DIGEST}" \
                    | tar --list --gzip \
                    | grep -v "/$"
                done
            ;;

        generate)
            generate ${state}
            exit
            ;;

        build)
            show_banner
            shift
            image=$1
            if test -z "${image}"; then
                echo "No image name specified"
                exit 1
            fi
            echo "Building image ${image} with $# tool(s)..."
            generate ${install_tools} \
            | docker build --tag "${image}" -
            exit
            ;;

        install)
            show_banner
            shift
            target=$1
            if test -z "${target}"; then
                echo "No target specified"
                exit 1
            fi
            shift
            echo "Using target ${target}"
            mkdir -p "${target}"
            for tool in ${install_tools}; do
                version="$(jq --raw-output --arg name "${tool}" 'select(.version != null) | .version' <<<"${tool_json[${tool}]}")"
                echo "${emoji_tool} Processing ${tool} ${version}"
                regctl manifest get "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${docker_setup_version}" --format raw-body | jq --raw-output '.layers[].digest' \
                | while read DIGEST; do
                    echo "${emoji_archive} Unpacking ${DIGEST}"
                    regctl blob get "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${docker_setup_version}" "${DIGEST}" \
                    | tar --extract --gzip --directory=${target} --no-same-owner
                done
                mkdir -p "/var/cache/docker-setup/${tool}"
                touch "/var/cache/docker-setup/${tool}/${version}"
            done
            if test -d /var/lib/docker-setup/post_install; then
                mkdir -p /var/lib/docker-setup /var/cache/docker-setup
                export prefix=
                export target=${prefix}/usr/local
                export relative_target=/usr/local
                export docker_setup_cache=/var/cache/docker-setup
                export docker_setup_contrib=/var/lib/docker-setup/contrib
                export docker_setup_manifests=/var/lib/docker-setup/manifests
                FILES="$(find /var/lib/docker-setup/post_install -type f -name \*.sh)"
                for FILE in ${FILES}; do
                    echo "Running post install for $(basename "${FILE}" .sh)"
                    if ! bash "${FILE}" >"${FILE}.log" 2>&1; then
                        cat "${FILE}.log"
                    else
                        rm "${FILE}"
                    fi
                done
            fi
            exit
            ;;

        install-from-registry)
            show_banner
            if ! type docker >/dev/null 2>&1; then
                echo "ERROR: Command <install> requires docker."
                exit 1
            fi
            shift
            target=$1
            if test -z "${target}"; then
                echo "No target specified"
                exit 1
            fi
            shift
            echo "Using target ${target}"
            if test "$#" == 0; then
                echo "No tools specified"
                exit 1
            fi
            mkdir -p "${target}"
            generate ${install_tools} \
            | docker build --output "${target}" -
            # TODO: post_install
            exit
            ;;

        install-from-image)
            show_banner
            if ! type docker >/dev/null 2>&1; then
                echo "ERROR: Command <install> requires docker."
                exit 1
            fi
            shift
            target=$1
            if test -z "${target}"; then
                echo "No target specified"
                exit 1
            fi
            shift
            echo "Using target ${target}"
            if test "$#" == 0; then
                echo "No tools specified"
                exit 1
            fi
            for tool in ${install_tools}; do
                echo "${emoji_tool} Processing ${tool}"
                echo "${emoji_image} Pulling image ${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${docker_setup_version}"
                docker image pull --quiet "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${docker_setup_version}"
                echo "${emoji_layer} Reading layers"
                docker image save "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${docker_setup_version}" \
                | tar --extract --to-stdout manifest.json \
                | jq --raw-output '.[].Layers[]' \
                | while read FILE; do
                    echo "${emoji_archive} Extracting layer $(dirname "${FILE}")"
                    docker image save "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${docker_setup_version}" \
                    | tar --extract --to-stdout "${FILE}" \
                    | tar --extract --directory="${target}" --strip-components=2
                done
                echo "+ Done"
            done
            # TODO: post_install
            exit
            ;;
        
        build-flat)
            show_banner
            if ! type docker >/dev/null 2>&1; then
                echo "ERROR: Command <install> requires docker."
                exit 1
            fi
            shift
            base=$1
            if test -z "${base}"; then
                echo "No base image name specified"
                exit 1
            fi
            shift
            image=$1
            if test -z "${image}"; then
                echo "No target image name specified"
                exit 1
            fi
            docker create --name docker-setup-install-flat ${base}
            for tool in ${install_tools}; do
                echo "${emoji_tool} Processing ${tool}"
                regctl manifest get "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${docker_setup_version}" --format raw-body | jq --raw-output '.layers[].digest' \
                | while read DIGEST; do
                    echo "${emoji_archive} Unpacking ${DIGEST}"
                    regctl blob get "${REGISTRY}/${REPOSITORY_PREFIX}${tool}:${docker_setup_version}" "${DIGEST}" \
                    | gunzip \
                    | docker cp - docker-setup-install-flat:/
                done
            done
            # TODO: post_install
            echo "${emoji_whale} Creating image ${image}"
            docker commit docker-setup-install-flat ${image}
            docker rm docker-setup-install-flat >/dev/null 2>&1
            exit
            ;;

        *)
            echo "ERROR: Unknown or empty command <${command}>"
            show_help
            exit 1
            ;;
    esac

    shift
done